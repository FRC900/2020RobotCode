# ros_control_boilerplate Settings -----------------------
# Settings for ros_control control loop
generic_hw_control_loop:
  loop_hz: 100
  cycle_time_error_threshold: 0.01

hardware_interface:
   run_hal_robot: false
   can_interface: can0
   joints:
       - {name: hood_extend_joint, type: solenoid, local_hardware: false, local_update: true}
       - {name: hood_retract_joint, type: solenoid, local_hardware: false, local_update: true}
       - {name: canifier, type: canifier, can_id: 1, local_hardware: true, local_update: true}
       - {name: robot_code_ready_jetson, local: true, type: ready}
       - {name: robot_code_ready_rio, local: false, type: ready} # Probably not really needed?
       
joint_state_controller:
   type:         joint_state_controller/JointStateController
   publish_rate: 100

joint_mode_state_controller:
   type:         joint_mode_state_controller/JointModeStateController
   publish_rate: 100

# Settings for ros_control hardware interface
# Map a name for each valid joint to a CAN id
# For future expansion, change hw_id to specify one
# of several types of HW interface : CAN_id, PWM_id, DIO_id, AIO_id, etc.

# Create controllers for each joint
#
# Entry is the name of the controller. It can be anything.  
# It will create a namespace with that name under the main
# controller namespace. Subscribed topics for that controller
# will be most often show up under 
# <top level controller manager ns>/<controller ns>/topic
# e.g.
# /frcrobot/joint1_talon_controller/command
# /frcrobot/joint2_talon_controller/command
# /frcrobot/talon_states
#
# This one creates the /talon_states topic necessary in ROS
# It doesn't actually control anything, just takes the internal
# encoder state used by the hw manager and publishes it as
# a ROS topic.  This is generic ROS stuff, so we'll have
# to figure out what to map e.g. effort to in the Talon world
talon_state_controller:
   type:         talon_state_controller/TalonStateController
   publish_rate: 100
talon_config_controller:
   type:         talon_config_controller/TalonConfigController
   publish_rate: 5

# Similar to above, but this one prints non-Talon state
# (stuff that fits into the more standard ROS position/


# Used to listen for joint state published from the given topic
# (in this case the rio) and copy them to internal copies of 
# joint data
joint_state_listener_controller:
    type:      state_listener_controller/JointStateListenerController
    topic:     /frcrobot_rio/joint_states

joint_mode_listener_controller:
    type:      state_listener_controller/JointModeListenerController
    topic:     /frcrobot_rio/joint_modes

match_state_listener_controller:
    type:      state_listener_controller/MatchStateListenerController
    topic:     /frcrobot_rio/match_data

canifier_controller:
    type:      canifier_controller/CANifierController
    joint_name: canifier
canifier_state_controller:
    type:     canifier_state_controller/CANifierStateController
    publish_rate: 100
