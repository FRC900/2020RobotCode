<?xml version="1.0"?>
<launch>

	<!-- GDB functionality -->
	<arg name="debug" default="false" />
	<arg unless="$(arg debug)" name="launch_prefix" value="" />
	<arg     if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />

	<arg name="hw_or_sim" default="hw" />
	<arg name="joy_or_key" default="joy" />
	<arg name="static_map" default="True"/>

	<group ns="frcrobot_jetson">
		<node name="zero_wheel_service" pkg="talon_swerve_drive_controller" type="zero_wheel_service" output="screen"> </node>

		<!-- These need to be replaced with the real thing -->
		<rosparam file="$(find ros_control_boilerplate)/config/2018_compbot_base_jetson.yaml" command="load"/>

		<rosparam file="$(find ros_control_boilerplate)/config/2018_swerve_drive.yaml" command="load"/>
		<rosparam file="$(find ros_control_boilerplate)/config/talon_swerve_offsets_offseason.yaml" command="load"/>
		<rosparam file="$(find ros_control_boilerplate)/config/2019_elevator_params.yaml" command="load"/>
		<rosparam file="$(find ros_control_boilerplate)/config/robot_code_ready_controller_jetson.yaml" command="load"/>

		<!-- Load hardware interface -->
		<node name="frcrobot_$(arg hw_or_sim)_interface" pkg="ros_control_boilerplate" type="frcrobot_$(arg hw_or_sim)_main"
			output="screen" launch-prefix="$(arg launch_prefix)">
		</node>

		<!-- Load controller manager -->
		<node name="ros_control_controller_manager" pkg="controller_manager" type="controller_manager" respawn="false"
			output="screen" args="spawn cargo_outtake_controller cargo_intake_controller climber_controller panel_intake_controller elevator_controller joint_state_controller joint_state_listener_controller talon_state_controller talon_config_controller match_state_listener_controller pcm_state_controller pdp_state_controller swerve_drive_controller robot_code_ready_controller" /> 

		<node name="heartbeat_jetson" pkg="heartbeat_node" type="heartbeat" output="screen" />
	</group>
	<group if="$(eval arg('hw_or_sim')=='hw')">
		<include file="$(find controller_node)/launch/multiflex_example.launch" />
	</group>

	<group ns="teleop">
		<rosparam file="$(find teleop_joystick_control)/config/teleop_joystick_comp.yaml" command="load"/>
		<node name="teleop_joystick_comp" pkg="teleop_joystick_control" type="teleop_joystick_comp" output="screen" >
			<remap from="navx_mxp" to="/frcrobot_rio/navx_mxp"/>
		</node>

		<group ns="translator0">
			<node name="translate_joystick_data_node" pkg="teleop_joystick_control" type="translate_joystick_data_node" output="screen"/>
		</group>

		<group ns="translator1" if="$(eval arg('joy_or_key')=='joy')">	
			<node name="translate_joystick_data_node" pkg="teleop_joystick_control" type="translate_joystick_data_node" output="screen" >
				<remap from="/frcrobot_rio/joystick_states_raw" to="/frcrobot_rio/joystick_states_raw1" />
			</node>
		</group>
	</group>

	<!-- Actionlib servers!!! -->
	<!-- Include this at the top level so all actionlib servers can find it -->
	<rosparam file="$(find behaviors)/config/autoInterpreterServer.yaml" command="load"/>
	<group ns="elevator">
		<rosparam file="$(find behaviors)/config/elevatorServer.yaml" command="load"/>
		<node name="elevator_ac_server" pkg="behaviors" type="elevator_server" output="screen" />
	</group>
	<group ns="climber">
		<rosparam file="$(find behaviors)/config/climberServer.yaml" command="load"/>
		<node name="climber_ac_server" pkg="behaviors" type="climber_server" output="screen" />
	</group>
	<group ns="cargo_intake">
		<rosparam file="$(find behaviors)/config/intakeCargoServer.yaml" command="load"/>
		<node name="intake_cargo_ac_server" pkg="behaviors" type="intake_cargo_server" output="screen" />
	</group>
	<group ns="cargo_outtake">
		<rosparam file="$(find behaviors)/config/outtakeCargoServer.yaml" command="load"/>
		<node name="outtake_cargo_ac_server" pkg="behaviors" type="outtake_cargo_server" output="screen" />
	</group>
	<group ns="hatch_intake">
		<rosparam file="$(find behaviors)/config/intakeHatchPanelServer.yaml" command="load"/>
		<node name="intake_hatch_ac_server" pkg="behaviors" type="intake_hatch_panel_server" output="screen" />
	</group>
	<group ns="hatch_outtake">
		<rosparam file="$(find behaviors)/config/outtakeHatchPanelServer.yaml" command="load"/>
		<node name="outtake_hatch_ac_server" pkg="behaviors" type="outtake_hatch_panel_server" output="screen" />
	</group>

	<group ns="path_to_goal">
		<rosparam file="$(find robot_visualizer)/config/robot_visualize.yaml" command="load"/>
		<!-- todo - remove next 2 config files after moving profile gen to swerve drive controller -->
		<rosparam file="$(find ros_control_boilerplate)/config/2018_swerve_drive.yaml" command="load"/>
		<rosparam file="$(find ros_control_boilerplate)/config/talon_swerve_offsets_offseason.yaml" command="load"/>
		<node name="base_trajectory_node" pkg="base_trajectory" type="base_trajectory_node" output="screen" > </node> 
		<node name="point_gen" pkg="swerve_point_generator" type="point_gen" output="screen" />
		<node name="map_server" pkg="map_server" type="map_server" args="$(find controller_node)/maps/2018FRC_field.yaml" output="screen" if="$(arg static_map)">
			<param name="frame_id" value="/map"/>
		</node>
		<node name="path_to_goal_ac_server" pkg="path_to_goal" type="path_to_goal_server" output="screen" />
		<node name="test_client" pkg="path_to_goal" type="test_client" output="screen" />
	</group>
		
	<group ns="cmd_vel_mux">
		<node name="twist_mux" pkg="twist_mux" type="twist_mux">
			<rosparam command="load" file="$(find talon_swerve_drive_controller)/config/twist_mux_topics.yaml"/>
			<remap from="cmd_vel_out" to="/frcrobot_jetson/swerve_drive_controller/cmd_vel"/>
		</node> 
	</group>

	<group ns="align_server">
		<rosparam file="$(find behaviors)/config/align_with_terabee.yaml" command="load"/>

		<node name="align_ac_server" pkg="behaviors" type="align_server" output="screen" />
		<node name="align_with_terabee_node" pkg="behaviors" type="align_with_terabee_node" output="screen"/>
		<group ns="distance_pid">
        <node name="distance_pid" pkg="pid" type="controller" >
            <param name="node_name" value="distance_pid" />
            <param name="Kp" value="5.0" />
            <param name="Ki" value="0.0" />
            <param name="Kd" value="0.1" />
            <param name="upper_limit" value="10" />
            <param name="lower_limit" value="-10" />
            <param name="windup_limit" value="10" />
            <param name="max_loop_frequency" value="100.0" />
            <param name="min_loop_frequency" value="100.0" />
			<param name="topic_from_controller" value="x_command" />     
		</node>
		</group>
		<node name="publish_pid_cmd_vel_node" pkg="behaviors" type="publish_pid_cmd_vel_node" output="screen">
			<param name="x_topic" value="distance_pid/x_command" />
			<param name="y_topic" value="align_with_terabee/y_command" />
			<param name="enable_topic" value="distance_pid/pid_enable" />
		</node>
	</group>
    
    <group ns="navX_snap_to_goal_pid">
		<!-- Snap to nearest goal test code -->
		<rosparam file="$(find teleop_joystick_control)/config/goal_angles.yaml" command="load"/>
		<node name="snap_to_nearest_goal" pkg="teleop_joystick_control" type="snap_to_nearest_goal" output="screen" />
        <node name="navX_snap_to_goal_pid" pkg="pid" type="controller" >
            <param name="node_name" value="navX_snap_to_goal_pid_node" />
            <param name="Kp" value="8.0" />
            <param name="Ki" value="0.0" />
            <param name="Kd" value="0.4" />
            <param name="upper_limit" value="4" />
            <param name="lower_limit" value="-4" />
            <param name="windup_limit" value="10" />
            <param name="max_loop_frequency" value="100.0" />
            <param name="min_loop_frequency" value="100.0" />
            <param name="topic_from_controller" value="orient_pid/orient_control_effort" />     
            <param name="setpoint_topic" value="navX_snap_to_goal_setpoint" />
            <param name="topic_from_plant" value="navX_snap_to_goal_state" />
        </node>
		<node name="publish_pid_cmd_vel_node" pkg="behaviors" type="publish_pid_cmd_vel_node" output="screen">
			<param name="orient_topic" value="orient_pid/orient_control_effort" />
			<param name="enable_topic" value="pid_enable" />
		</node>
    </group>

</launch>
