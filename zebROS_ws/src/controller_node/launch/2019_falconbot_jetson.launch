<?xml version="1.0"?>
<launch>

	<!-- GDB functionality -->
	<arg name="debug" default="false" />
	<arg unless="$(arg debug)" name="launch_prefix" value="" />
	<arg     if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />

	<arg name="hw_or_sim" default="hw" />
	<arg name="joy_or_key" default="joy" />
	<arg name="record" default="false" />

	<group ns="frcrobot_jetson">
		<rosparam file="$(find ros_control_boilerplate)/config/2019_falconbot_base_jetson.yaml" command="load"/>
		<rosparam file="$(find ros_control_boilerplate)/config/2019_falconbot_swerve_drive.yaml" command="load"/>
		<rosparam file="$(find ros_control_boilerplate)/config/2019_falconbot_offsets.yaml" command="load"/>
		<rosparam file="$(find ros_control_boilerplate)/config/robot_code_ready_controller_jetson.yaml" command="load"/>

		<node name="dump_offsets_service" pkg="talon_swerve_drive_controller" type="dump_offsets_service" output="screen"> </node>

		<!-- Load hardware interface -->
		<node name="frcrobot_$(arg hw_or_sim)_interface" pkg="ros_control_boilerplate" type="frcrobot_$(arg hw_or_sim)_main"
			output="screen" launch-prefix="$(arg launch_prefix)">
		</node>

		<!-- Load controller manager-->
		<node name="ros_control_controller_manager" pkg="controller_manager" type="controller_manager" respawn="false"
			output="screen" args="spawn joint_state_controller joint_state_listener_controller talon_state_controller talon_config_controller match_state_listener_controller pdp_state_controller swerve_drive_controller robot_code_ready_controller" />

		<node name="uptime_jetson" pkg="uptime" type="uptime_node" output="screen" />
	</group>

	<group ns="imu">
		<include file="$(find controller_node)/launch/2019_compbot_jetson_imu.launch">
			<arg name="primary_imu" value="NAVX" />
		</include>
	</group>

	<group ns="teleop">
		<rosparam file="$(find teleop_joystick_control)/config/teleop_joystick_comp.yaml" command="load"/>
                <node name="teleop_joystick_comp" pkg="teleop_joystick_control" type="teleop_joystick_comp" output="screen" />

		<group ns="translator0">
			<node name="translate_joystick_data_node" pkg="teleop_joystick_control" type="translate_joystick_data_node" output="screen"/>
		</group>

		<group ns="translator1" if="$(eval arg('joy_or_key')=='two_joy')">
			<node name="translate_joystick_data_node" pkg="teleop_joystick_control" type="translate_joystick_data_node" output="screen" >
				<remap from="/frcrobot_rio/joystick_states_raw" to="/frcrobot_rio/joystick_states_raw1" />
			</node>
		</group>
		<group ns="orient_strafing">
			<rosparam file="$(find teleop_joystick_control)/config/teleop_joystick_comp.yaml" command="load"/>
			<node name="orient_strafing_pid" pkg="pid" type="controller" >
				<param name="node_name" value="orient_strafing_pid" />
				<param name="Kp" value="5.5" />
				<param name="Ki" value="0.0" />
				<param name="Kd" value="0.055" />
				<param name="upper_limit" value="5" />
				<param name="lower_limit" value="-5" />
				<param name="windup_limit" value="5" />
				<param name="angle_error" value="true" />
			</node>
			<node name="orient_strafing_node" pkg="teleop_joystick_control" type="orient_strafing_node" output="screen"/>
		</group>
	</group>
	<group ns="cmd_vel_mux">
		<node name="twist_mux" pkg="twist_mux" type="twist_mux">
			<rosparam command="load" file="$(find talon_swerve_drive_controller)/config/twist_mux.yaml"/>
			<remap from="cmd_vel_out" to="/frcrobot_jetson/swerve_drive_controller/cmd_vel"/>
		</node>
	</group>
</launch>
