#!/usr/bin/env python

PACKAGE='spark_max_controllers'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
#       Name                               Type      Reconfiguration-level  Description  											Default  Min  Max
gen.add("pidf_reference_slot",             int_t,    0,                     "Choose between different PID config sets",  		 	0,       0,   3)
gen.add("p_gain0",                         double_t, 0,                     "Proportional constant 0",          					0,       0,   100)
gen.add("i_gain0",                         double_t, 0,                     "Integral constant 0",          						0,       0,   100)
gen.add("d_gain0",                         double_t, 0,                     "Derivative constant 0",          						0,       0,   100)
gen.add("f_gain0",                         double_t, 0,                     "Feed forward constant 0",          					0,       0,   100)
gen.add("i_zone0",                         double_t, 0,                     "Limits integral error to certain range 0",          	0,       0,  100000)
gen.add("d_filter0",                       double_t, 0,                     "Filter for derivative constant 0",          			0,       0,  100000)
gen.add("pidf_output_min0",                double_t, 0,                     "Minimum output value 0",							   -1,     -1,  1)
gen.add("pidf_output_max0",                double_t, 0,                     "Maximum output value 0",								1,     -1,  1)
gen.add("pidf_arb_feed_forward0",          double_t, 0,                     "Arbitrary feed forward value 0",                       0,      -10,  10)
arb_ff_units_enum = gen.enum([ 
		gen.const("ArbFFUnits_Voltage",    int_t, 0,  ""),
		gen.const("ArbFFUnits_PercentOut", int_t, 0,  "")
], "")
gen.add("pidf_arb_feed_forward_units0",    int_t,    0,                     "Units of pidf_arb_feed_forward0",						0,		0,		2, edit_method=arb_ff_units_enum)
                                
gen.add("p_gain1",                         double_t, 0,                     "Proportional constant 1",          					0,       0,   100)
gen.add("i_gain1",                         double_t, 0,                     "Integral constant 1",          						0,       0,   100)
gen.add("d_gain1",                         double_t, 0,                     "Derivative constant 1",          						0,       0,   100)
gen.add("f_gain1",                         double_t, 0,                     "Feed forward constant 1",          					0,       0,   100)
gen.add("i_zone1",                         double_t, 0,                     "Limits integral error to certain range 1",         	0,       0,  100000)
gen.add("d_filter1",                       double_t, 0,                     "Filter for derivative constant 1",          			0,       0,  100000)
gen.add("pidf_output_min1",                double_t, 0,                     "Minimum output value 1",							   -1,     -1,  1)
gen.add("pidf_output_max1",                double_t, 0,                     "Maximum output value 1",								1,     -1,  1)
gen.add("pidf_arb_feed_forward1",          double_t, 0,                     "Arbitrary feed forward value 1",                       0,      -10,  10)
gen.add("pidf_arb_feed_forward_units1",    int_t,    0,                     "Units of pidf_arb_feed_forward1",						0,		0,       2, edit_method=arb_ff_units_enum)

gen.add("p_gain2",                         double_t, 0,                     "Proportional constant 2",          					0,       0,   100)
gen.add("i_gain2",                         double_t, 0,                     "Integral constant 2",          						0,       0,   100)
gen.add("d_gain2",                         double_t, 0,                     "Derivative constant 2",          						0,       0,   100)
gen.add("f_gain2",                         double_t, 0,                     "Feed forward constant 2",          					0,       0,   100)
gen.add("i_zone2",                         double_t, 0,                     "Limits integral error to certain range 2",         	0,       0,  100000)
gen.add("d_filter2",                       double_t, 0,                     "Filter for derivative constant 2",          			0,       0,  100000)
gen.add("pidf_output_min2",                double_t, 0,                     "Minimum output value 2",								-1,     -1,  1)
gen.add("pidf_output_max2",                double_t, 0,                     "Maximum output value 2",								 1,     -1,  1)
gen.add("pidf_arb_feed_forward2",          double_t, 0,                     "Arbitrary feed forward value 2",                       0,      -10,  10)
gen.add("pidf_arb_feed_forward_units2",    int_t,    0,                     "Units of pidf_arb_feed_forward2",						0,		0,      2, edit_method=arb_ff_units_enum)

gen.add("p_gain3",                         double_t, 0,                     "Proportional constant 3",          					0,       0,   100)
gen.add("i_gain3",                         double_t, 0,                     "Integral constant 3",          						0,       0,   100)
gen.add("d_gain3",                         double_t, 0,                     "Derivative constant 3",          						0,       0,   100)
gen.add("f_gain3",                         double_t, 0,                     "Feed forward constant 3",          					0,       0,   100)
gen.add("i_zone3",                         double_t, 0,                     "Limits integral error to certain range 3",         	0,       0,  100000)
gen.add("d_filter3",                       double_t, 0,                     "Filter for derivative constant 3",          			0,       0,  100000)
gen.add("pidf_output_min3",                double_t, 0,                     "Minimum output value 3",								-1,     -1,  1)
gen.add("pidf_output_max3",                double_t, 0,                     "Maximum output value 3",								 1,     -1,  1)
gen.add("pidf_arb_feed_forward3",          double_t, 0,                     "Arbitrary feed forward value 3",                       0,      -10,  10)
gen.add("pidf_arb_feed_forward_units3",    int_t,    0,                     "Units of pidf_arb_feed_forward3",						0,       0,	  2,   edit_method=arb_ff_units_enum)

limit_switch_polarity_enum = gen.enum([ 
		gen.const("NormallyOpen",   int_t, 0,  ""),
		gen.const("NormallyClosed", int_t, 1,  "")
], "")
gen.add("forward_limit_switch_polarity",   int_t,    0,                     "Normally open or closed",								0,		  0,   2, edit_method=limit_switch_polarity_enum)
gen.add("forward_limit_switch_enabled",    bool_t,   0,                     "Enable or disable forward limit switch",				False)
gen.add("reverse_limit_switch_polarity",   int_t,    0,                     "Normally open or closed",								0,		  0,   2, edit_method=limit_switch_polarity_enum)
gen.add("reverse_limit_switch_enabled",    bool_t,   0,                     "Enable or disable reverse limit switch",				False)

gen.add("current_limit",			   	   int_t,    0,                     "Current limit",										0,       0,   200)
gen.add("current_limit_stall",		   	   int_t,    0,                     "Current limit stall",									0,       0,   200)
gen.add("current_limit_free",		   	   int_t,    0,                     "Current limit free",									0,       0,   200)
gen.add("current_limit_rpm",		   	   int_t,    0,                     "Current limit rpm",									0,       0,   200)
gen.add("secondary_current_limit",		   int_t,    0,                     "Secondary current limit",								0,       0,   200)
gen.add("secondary_current_limit_cycles",  int_t,    0,                     "Secondary current limit cycles",						0,       0,   200)

idle_mode_enum = gen.enum([ 
		gen.const("Coast", int_t, 0,  ""),
		gen.const("Brake", int_t, 1,  "")
], "")
gen.add("idle_mode",					   int_t,    0,                     "Idle mode - brake or coast",							0,		  0,   2, edit_method=idle_mode_enum)

gen.add("voltage_compensation_enable",     bool_t,   0,                     "Enable or disable voltage compensation",				False)
gen.add("voltage_compensation_nominal_voltage", double_t, 0,                "Voltage compensation nominal value",                   0,      0,  28)

gen.add("open_loop_ramp_rate",			   double_t, 0,						"Ramp rate for open loop control",                      0,      0,  2)
gen.add("closed_loop_ramp_rate",		   double_t, 0,						"Ramp rate for closed loop control",                    0,      0,  2)

external_follower_enum = gen.enum([ 
		gen.const("FollowerDisabled",  int_t, 0,  ""),
		gen.const("FollowerSparkMax",  int_t, 1,  ""),
		gen.const("FollowerPhoenix",   int_t, 2,  "")
], "")
gen.add("follower_type",			   		int_t,    0,                     "Follower type - disabled, spark max or phoenix",			0,		  0,   3, edit_method=external_follower_enum)
gen.add("follower_id",				   		int_t,    0,                     "CAN ID of master to follow",								0,       0,   64)
gen.add("follower_invert",		       		bool_t,   0,                     "Invert output of followed controller", 	 				False)

gen.add("forward_softlimit_enable",    		bool_t,   0,                     "Enable or disable forward softlimit",					False)
gen.add("forward_softlimit", 				double_t, 0,                	 "Forward softlimit value",                              0,  -1000,  1000)
gen.add("reverse_softlimit_enable",    		bool_t,   0,                     "Enable or disable reverse softlimit",					False)
gen.add("reverse_softlimit", 				double_t, 0,                	 "Forward softlimit value",                              0,  -1000,  1000)

gen.add("encoder_ticks_per_rotation",		int_t,    0,                     "Encoder ticks per rotation",							0,       0,   8192)
encoder_type_enum = gen.enum([ 
		gen.const("NoSensor",    int_t, 0,  ""),
		gen.const("HallSensor",  int_t, 1,  ""),
		gen.const("Quadrature",  int_t, 2,  ""),
		gen.const("Sensorless",  int_t, 3,  "")
], "")
gen.add("encoder_type", 			   		int_t,    0,                     "Encoder type", 										0,		  0,   4, edit_method=encoder_type_enum)
exit(gen.generate(PACKAGE, "spark_max_reconfigure_node", "SparkMax"))

